# -*- coding: utf-8 -*-
"""Model_Recovery.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y4ui-Zlvg7zu-Ov8dqBdHPP1g58Xo7A6
"""

import numpy as np
import pandas as pd
from model_based_rl import ModelBasedRL
from model_free_rl import ModelFreeRL
from parameter_fitting import *


#Model Recovery#

def simulate_data_for_model_recovery(model_type, trials=100):
    """
    Simulates data from a Model Free or Model Based RL with randomly chosen parameters.
    """
    alpha = np.random.uniform(0, 1)
    beta = np.random.uniform(0.1, 10)
    theta = np.random.uniform(-1, 1)
    gamma = np.random.uniform(0.5, 1)  #Model Based

    if model_type == "model_free":
        agent = ModelFreeRL(alpha, beta, theta, gamma)
        data = simulate_mfrl_trials(trials, alpha, beta, gamma, theta)
    else:
        agent = ModelBasedRL(alpha, beta, theta, gamma)
        data = simulate_data_for_fitting(trials, alpha, beta, gamma, theta)

    return data, model_type

def recover_model(data):
    """
    Model fitting to the simulated data to determine the best fit
    """
    best_params_mf, best_likelihood_mf = grid_search_parameter_fit_mf(data)
    best_params_mb, best_likelihood_mb = grid_search_parameter_fit(data)

    recovered_model = "model_free" if best_likelihood_mf > best_likelihood_mb else "model_based"
    return recovered_model

def model_recovery_experiment(num_simulations=100, trials_per_sim=100):
    """
    Runs multiple simulations and fits both models to assess model recovery accuracy
    """
    true_models = []
    recovered_models = []

    for _ in range(num_simulations):
        true_model_type = np.random.choice(["model_free", "model_based"])
        data, true_model = simulate_data_for_model_recovery(true_model_type, trials_per_sim)
        recovered_model = recover_model(data)

        true_models.append(true_model)
        recovered_models.append(recovered_model)

    accuracy = np.mean(np.array(true_models) == np.array(recovered_models))
    print(f"Model recovery accuracy: {accuracy * 100:.2f}%")

    return pd.DataFrame({"True Model": true_models, "Recovered Model": recovered_models})

# Run model recovery experiment
if __name__ == "__main__":
    results = model_recovery_experiment()
    print(results)